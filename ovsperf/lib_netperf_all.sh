# helper for netperf

#usage
# do_host_netperf [ipv4_local,]ipv4_remote [ipv6_local,]ipv6_remote result_file_name[,result_criteria] [netperf_time] ["other options passed to netperf"]
# *** NOTE:
#    if you want this helper for both IPv4 and IPv6,
#    -L option MUST be generated by "ipv4_local,ipv4_remote" and "ipv6_local,ipv6_remote", and
#    -L option MUST NOT appear in "other options passed to netperf".
#    The code here DOES NOT check this
#
# examples:
# do_host_netperf 192.168.214.2 "" test_result.log,1000 "-l 20 -L 192.168.214.1"
# do_host_netperf "" 2001:db8:214::2 test_result.log "-l 20 -L 2001:db8:214::1"
# do_host_netperf 192.168.214.2 2001:db8:214::2 test_result.log,500 "-l 20"
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log "-l 20"
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log,8000 "-l 30" ,1472
# do_host_netperf 192.168.214.1,192.168.214.2 2001:db8:214::1,2001:db8:214::2 test_result.log,8000 "" 15000,1472
do_host_netperf_all()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$4
	local netperf_time=${netperf_time:-""}
	local tcp_msg_size=${tcp_msg_size:-$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -4 -t UDP_STREAM -H $ipv4 $options -l $netperf_time $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -6 -t UDP_STREAM -H $ipv6 $options -l $netperf_time $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_host_netperf_tcp_all()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$4
	local netperf_time=${netperf_time:-""}
	local tcp_msg_size=${tcp_msg_size:-$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "TCP_STREAMv6" "TCP_MAERTSv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_host_netperf_tcp_stream()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$4
	local netperf_time=${netperf_time:-""}
	local tcp_msg_size=${tcp_msg_size:-$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_host_netperf_tcp_maerts()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$4
	local netperf_time=${netperf_time:-""}
	local tcp_msg_size=${tcp_msg_size:-$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_MAERTSv4=0
	local TCP_MAERTSv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size)
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_MAERTSv4" "TCP_MAERTSv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_MAERTSv4" "$TCP_MAERTSv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_MAERTSv4" "$TCP_MAERTSv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_host_netperf_udp_stream()
{
	local ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $3 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $3 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$4
	local netperf_time=${netperf_time:-""}
	local tcp_msg_size=${tcp_msg_size:-$(echo $6 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $6 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $1 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local UDP_STREAMv4=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		timeout 120s bash -c "until ping -c3 $p_ipv4; do sleep 10; done"
		log=$(netperf -4 -t UDP_STREAM -H $ipv4 $options -l $netperf_time $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		timeout 120s bash -c "until ping6 -c3 $p_ipv6; do sleep 10; done"
		log=$(netperf -6 -t UDP_STREAM -H $ipv6 $options -l $netperf_time $udp_msg_size)
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "UDP_STREAMv4" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$UDP_STREAMv4" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$UDP_STREAMv4" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

#usage
# do_vm_netperf vm [ipv4_local,]ipv4_remote [ipv6_local,]ipv6_remote result_file_name[,result_criteria] "other options passed to netperf"
# ** NOTE:
#   if you want this helper for both IPv4 and IPv6,
#   -L option MUST be generated by "ipv4_local,ipv4_remote" and "ipv6_local,ipv6_remote", and
#   -L option MUST NOT appear in "other options passed to netperf".
#   The code here DOES NOT check this
# example
#   see do_host_netperf as reference
do_vm_netperf_all()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$5
	local netperf_time=${netperf_time:-$(echo $6 | awk '{ if (NF > 0) { print $1 } else { print 10 } }')}
	local tcp_msg_size=${tcp_msg_size:-$(echo $7 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $7 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -4 -t UDP_STREAM -H $ipv4 $options -l $netperf_time $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -6 -t UDP_STREAM -H $ipv6 $options -l $netperf_time $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))) || (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "UDP_STREAMv4" "TCP_STREAMv6" "TCP_MAERTSv6" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$UDP_STREAMv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_vm_netperf_tcp_all()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$5
	local netperf_time=${netperf_time:-$(echo $6 | awk '{ if (NF > 0) { print $1 } else { print 10 } }')}
	local tcp_msg_size=${tcp_msg_size:-$(echo $7 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $7 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_MAERTSv4=0
	local UDP_STREAMv4=0
	local TCP_STREAMv6=0
	local TCP_MAERTSv6=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))) || (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_MAERTSv4" "TCP_STREAMv6" "TCP_MAERTSv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_MAERTSv4" "$TCP_STREAMv6" "$TCP_MAERTSv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_vm_netperf_tcp_stream()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$5
	local netperf_time=${netperf_time:-$(echo $6 | awk '{ if (NF > 0) { print $1 } else { print 10 } }')}
	local tcp_msg_size=${tcp_msg_size:-$(echo $7 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $7 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_STREAMv4=0
	local TCP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_STREAM -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv4=0
		else
			TCP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_STREAM -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_STREAMv6=0
		else
			TCP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_STREAMv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_STREAMv4" "TCP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_STREAMv4" "$TCP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_STREAMv4" "$TCP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_vm_netperf_tcp_maerts()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$5
	local netperf_time=${netperf_time:-$(echo $6 | awk '{ if (NF > 0) { print $1 } else { print 10 } }')}
	local tcp_msg_size=${tcp_msg_size:-$(echo $7 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $7 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local TCP_MAERTSv4=0
	local TCP_MAERTSv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -4 -t TCP_MAERTS -H $ipv4 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv4=0
		else
			TCP_MAERTSv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_MAERTSv4 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -6 -t TCP_MAERTS -H $ipv6 $options -l $netperf_time $tcp_msg_size")
		if (( $? )); then
			TCP_MAERTSv6=0
		else
			TCP_MAERTSv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$TCP_MAERTSv6 < $tcp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "TCP_MAERTSv4" "TCP_MAERTSv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$TCP_MAERTSv4" "$TCP_MAERTSv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$TCP_MAERTSv4" "$TCP_MAERTSv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

do_vm_netperf_udp_stream()
{
	local vm=$1
	local ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -L "$1 } else { print $1 } }')
	local result_file=$(echo $4 | awk -F ',' '{ print $1 }')
	local tcp_result_criteria=${tcp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($2 > 0) { print $2 } else { print 100 } }')}
	local udp_result_criteria=${udp_result_criteria:-$(echo $4 | awk -F ',' '{ if ($3 > 0) { print $3 } else { print 100 } }')}
	local options=$5
	local netperf_time=${netperf_time:-$(echo $6 | awk '{ if (NF > 0) { print $1 } else { print 10 } }')}
	local tcp_msg_size=${tcp_msg_size:-$(echo $7 | awk -F ',' '{ if ($1 > 0) { print " -- -m "$1 } else { print " -- -m 16384" } }')}
	local udp_msg_size=${udp_msg_size:-$(echo $7 | awk -F ',' '{ if ($2 > 0) { print " -- -m "$2 } else { print " -- -m 65507" } }')}
	local p_ipv4=$(echo $2 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')
	local p_ipv6=$(echo $3 | awk -F ',' '{ if (NF > 1) { print $2" -I "$1 } else { print $1 } }')

	local UDP_STREAMv4=0
	local UDP_STREAMv6=0
	local result=0
	local log=""

	# IPv4
	if [ -n "$ipv4" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping -c3 $p_ipv4; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -4 -t UDP_STREAM -H $ipv4 $options -l $netperf_time $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv4=0
		else
			UDP_STREAMv4=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$UDP_STREAMv4 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	# IPv6
	if [ -n "$ipv6" ]; then
		vmsh run_cmd $vm_name "timeout 120s bash -c \"until ping6 -c3 $p_ipv6; do sleep 10; done\""
		log=$(vmsh run_cmd $vm_name "netperf -6 -t UDP_STREAM -H $ipv6 $options -l $netperf_time $udp_msg_size")
		if (( $? )); then
			UDP_STREAMv6=0
		else
			UDP_STREAMv6=$(printf "$log"|sed -n '/netperf/,/^\[root@.*]#/ {/.*/ p}'|sed -n '/\(\b[0-9]\+\)\{5,\}/ p'|sed 's/[\r\n]//'|tail -n1|awk '{printf $NF}')
		fi
		printf "$log\n"

		if (($(bc <<< "$UDP_STREAMv6 < $udp_result_criteria"))); then
			result=1
		fi
	fi

	local log_format="||  %-14s||  %-14s|| %s\n"
	printf "$log_format" "UDP_STREAMv4" "UDP_STREAMv6" ""| tee -a $result_file
	printf "$log_format" "------------" "------------" ""| tee -a $result_file
	if (( $result )); then
		printf "$log_format" "$UDP_STREAMv4" "$UDP_STREAMv6" "*"| tee -a $result_file
	else
		printf "$log_format" "$UDP_STREAMv4" "$UDP_STREAMv6" ""| tee -a $result_file
	fi

	if i_am_client; then
		rhts_submit_log -l $result_file
	fi

	return $result
}

log_header()
{
	local test_name=$1
	local result_file=$2
	local nic_mtu=$(ip l l | grep $iface | awk '{print $5}')
	if [[ $(ip l l | grep $intport) ]]; then
		intport_mtu=$(ip l l | grep $intport | awk '{print $5}')
	else
		intport_mtu="NA"
	fi
	
	if [[ "$use_vm" == "yes" ]]; then
		vmsh run_cmd $vm_name "ip l l" > /tmp/vm_mtu.txt
		vm_mtu=$(grep $iface_vm /tmp/vm_mtu.txt | awk '{print $5}')
		if [[ $(ip l l | grep vnet) ]]; then
			vnet_mtu=$(ip l l | grep vnet | awk '{print $5}')
		fi
	else
		vm_mtu="NA"
		vnet_mtu="NA"
	fi
	local driver=$(ethtool -i $iface | grep driver | awk '{print $2}')
	local iface_speed=$(ethtool $iface | grep Speed | awk '{print $2}' | tr -d '[a-z A-Z /]')
	local tnl_offload_state=$(ethtool -k $iface | grep tx-udp_tnl-segmentation | awk '{ print $2 }')
	local kernel_version=$(uname -r)
	local ovs_ver=$(ovs-vsctl show | grep ovs_version | awk '{print $2}' | tr -d '[" " "]')

	printf "||------------------------------------------------------------------------------------------------------------\n" >> $result_file
	printf "||------------------------------------------------------------------------------------------------------------\n" >> $result_file
	printf "|| Test name: $test_name\n" >> $result_file
	printf "|| Driver: $driver, Link speed: $iface_speed Mbps, vxlan offload: $tnl_offload_state\n" >> $result_file
	printf "|| MTU Info: NIC MTU: $nic_mtu, $intport MTU: $intport_mtu, VNET MTU: $vnet_mtu, VM MTU: $vm_mtu\n" >> $result_file
	printf "|| TCP Pass/Fail threshold: $tcp_result_criteria Mbps, UDP Pass/Fail threshold: $udp_result_criteria Mbps\n" >> $result_file
	printf "|| Kernel version: $kernel_version, OVS version: $ovs_ver\n" >> $result_file	
	printf "||------------------------------------------------------------------------------------------------------------\n" >> $result_file
}

